# helm repo add command

related files:
cmd/helm/repo_add_test.go
pkg/repo/repotest/
pkg/repo/
cmd/helm/testdata/output/repo-add.txt

tasks:
1. need to add tests for downloading index.json if that's present, and NOT
download index.yaml

2. If any error occurs while downloading index.json - if it's 404 error, it's
okay, for any other failure - fail the whole thing, don't fall back to
index.yaml. Any other failure would mean - server errors (5xx), processing
errors after successfully downloading the index.json file

3. make sure that index.yaml is used if there's a 404 error for the index.json
file. should other client side errors (4xx) be considered too? ðŸ¤” check this out

4. pass these tests by writing actual code

details:
1. okay, I can see that there's a temporary server that's being run - an actual
server I guess, which hosts an index.yaml. At least that's what it looks like.
Now I need to be able to host an index.json too - but not always - I mean, I
should be able to tweak the way the server functions - as I want to be able to
test a server that only hosts index.yaml and then a server that hosts both
index.json and index.yaml. There WON'T be a case where the index.yaml won't be
hosted - because if that happens, that would be a breaking change - removing
an existing feature, without changing the major version of the software, as
any clients dependent on the server, that are still old and only know about the
index.yaml as an index will not be able to download the index then, if
index.json becomes the only index. So, we will not be writing any tests for that
breaking change case

And why do we need the tweak with both behavior for the server? the behaviors
being
* server hosting only index.yaml
* server hosting both index.yaml and index.json

this is so that both the scenarios can be tested, as we want index.json to be
used only if it's present, or else fallback to index.yaml - this will happen
in new versions of helm that is, with the server being old, only hosting
index.yaml but not index.json

2. some more things I noticed are - there's a command line level test - to
see the output of the repo add command

and then there's a functionality level test - to test if the downloaded
index.yaml file is correct. here we need to add a test for index.json
download too

and then there's also a test for concurrent adding of repos - I'm guessing
this handling of concurrency was recently done and hence the test. here
we need to add a test for concurrent adding of repos when the repo index
is a json index file

micro tasks:
1. make tweaks to the server to serve index.json file too.

I was thinking of adding a boolean parameter to NewTempServer() function.

may be I could add it to the Server struct as a field and based on the field's
value, change the behavior of the server. I think that's the best idea ever :P
haha

2. add a command level test? hmm? I think we should add one separately for
adding repo with index.json too. so yeah. let's do it. the output is the same
as the previous test though, just that the input is different

3. add feature level tests for index.json download - different scenarios. think
about different scenarios. check above too

4. add concurrency based repo addition tests. again, with different scenarios
may be. think on this!

I just have one thought - I have had this before - I'm doing TDD - writing tests
first and then code. According to TDD, you should write only failing tests,
and I think you should write them one by one? I need to go read again. So, if
that's the case, if I write one failing test and write just enough code to pass
the test, the when I try to write the other tests, they will be passing which
then would mean we don't need the test ðŸ™ˆ But I want all the tests so that
whatever features are present with respect to index.yaml should also be
present for index.json

The only catch is - index.json is json which is also a valid yaml.
