# helm repo add command

related files:
cmd/helm/repo_add_test.go
pkg/repo/repotest/
pkg/repo/
cmd/helm/testdata/output/repo-add.txt

tasks:
1. need to add tests for downloading index.json if that's present, and NOT
download index.yaml

2. If any error occurs while downloading index.json - if it's 404 error, it's
okay, for any other failure - fail the whole thing, don't fall back to
index.yaml. Any other failure would mean - server errors (5xx), processing
errors after successfully downloading the index.json file

3. make sure that index.yaml is used if there's a 404 error for the index.json
file. should other client side errors (4xx) be considered too? ðŸ¤” check this out

4. pass these tests by writing actual code

5. add test for goroutine version of adding repos too which have json index -
for concurrent testing

details:
1. okay, I can see that there's a temporary server that's being run - an actual
server I guess, which hosts an index.yaml. At least that's what it looks like.
Now I need to be able to host an index.json too - but not always - I mean, I
should be able to tweak the way the server functions - as I want to be able to
test a server that only hosts index.yaml and then a server that hosts both
index.json and index.yaml. There WON'T be a case where the index.yaml won't be
hosted - because if that happens, that would be a breaking change - removing
an existing feature, without changing the major version of the software, as
any clients dependent on the server, that are still old and only know about the
index.yaml as an index will not be able to download the index then, if
index.json becomes the only index. So, we will not be writing any tests for that
breaking change case

And why do we need the tweak with both behavior for the server? the behaviors
being
* server hosting only index.yaml
* server hosting both index.yaml and index.json

this is so that both the scenarios can be tested, as we want index.json to be
used only if it's present, or else fallback to index.yaml - this will happen
in new versions of helm that is, with the server being old, only hosting
index.yaml but not index.json

2. some more things I noticed are - there's a command line level test - to
see the output of the repo add command

and then there's a functionality level test - to test if the downloaded
index.yaml file is correct. here we need to add a test for index.json
download too

and then there's also a test for concurrent adding of repos - I'm guessing
this handling of concurrency was recently done and hence the test. here
we need to add a test for concurrent adding of repos when the repo index
is a json index file

micro tasks:
1. make tweaks to the server to serve index.json file too.

I was thinking of adding a boolean parameter to NewTempServer() function.

may be I could add it to the Server struct as a field and based on the field's
value, change the behavior of the server. I think that's the best idea ever :P
haha

2. add a command level test? hmm? I think we should add one separately for
adding repo with index.json too. so yeah. let's do it. the output is the same
as the previous test though, just that the input is different

3. add feature level tests for index.json download - different scenarios. think
about different scenarios. check above too

4. add concurrency based repo addition tests. again, with different scenarios
may be. think on this!

I just have one thought - I have had this before - I'm doing TDD - writing tests
first and then code. According to TDD, you should write only failing tests,
and I think you should write them one by one? I need to go read again. So, if
that's the case, if I write one failing test and write just enough code to pass
the test, the when I try to write the other tests, they will be passing which
then would mean we don't need the test ðŸ™ˆ But I want all the tests so that
whatever features are present with respect to index.yaml should also be
present for index.json

The only catch is - index.json is json which is also a valid yaml.

Anyways, let's write the test first!

I was checking a bit of implementation too ðŸ™ˆFor a second I was thinking
about the catch. Like, I have already written some functions separately for json
but only realized later that they are not needed as yaml parser can also
understand json parser. Let's see what to do about that. May be for now, I'll
have separate functions. Will note that down in the decisions!

Back to tests! I'm writing all the tests at once! As much as possible :P

I was just thinking about adding that boolean parameter to NewTempServer() but
hey, the function is exported and Helm 3 has a strict policy of not breaking
the API or features. Hmm. I think I'm just gonna add another method which
will enable or disable serving JSON. Need to see how it will work - when it
has to be called and stuff. Hmm. Feels a bit weird, as people could enable
it or disable it anytime. Anyways, one thing that does not change is - there
will still be a field in the Server struct which tells if index.json should be
served or not. Actually, now that I come to think of it, should the default be
both index.yaml and index.json ? ðŸ¤” Nah. For now I'll let the default be
just index.yaml, so that I don't change the existing tests at all. Enabling
index.json will be a new thing for the Server.

Okay, I was just checking what to do about the index.json - I think I can do
this - I can have a method to toggle the index.json serving on and off. And
whenever the toggle happens, I'll also create the index files - based on the
toggle. And for toggle off after on - if index.json already exists - it will be
removed / cleaned.

On checking, I noticed that the server that's being run is run using the
httptest package in `net/http` and a file server is used to serve the files
in a directory. So, if I just put the files or remove them, everything should
be fine ;) :)

I noticed that there's so much code for a test server and was thinking if that
will have tests - it indeed has one test file! ðŸ˜®

Let me write test for that too first ðŸ™ˆand then implement it off!

Okay, I wrote tests for toggle on and toggle off too! Let's see how the
implementation goes!

yay! I finished the implementation for toggling the serving of json index on
and off! by default it's off! :)

Okay, I have put a commit for that - small commits :P

Now, what next. So, I'm able to serve index.json file now.

Let's add a cmd level test to switch on index.json serving and add repo. This
is infact going to pass. As it will download the yaml index now. Hmm. How about
we add a feature level test first? That's better!

For now I'm going to add a separate test function, but it's better if they
are later converted to `t.Run()` functions

Looks like my test is showing me some new things - about caches and all. Good.
TDD is nice :P Too much tests ðŸ¤ª ðŸ˜† Copy pasted tests with some new checks :P

Let's see what the new checks to be added are!

So, a test server is being run. I have enabled serving index.json file

So, it's testing the repositories.yaml which has a list of repositories. In our
case, that will not change, that's still a yaml file, with the same contents!

The next thing that it tests is - cache index file - it seems like a yaml file,
in our case, this should be a json file. So, let's add that first

Then the next test is for a charts.txt which contains the chart names in
a repository

And then there's a test for adding the repository with --no-update as false,
which should pass

So, I have made all the changes for this now for this small feature - Let's
run this.

Running it gives the correct error

```
--- FAIL: TestRepoAdd_IndexJSON (0.03s)
    /Users/karuppiahn/oss/github.com/helm/helm/cmd/helm/repo_add_test.go:143: Error cache json index file was not created for repository test-name
FAIL
```

I'm going to implement the feature now. Now, from the `run()` function, I can
see quite some stuff going on, like locking, doing the check for --no-update
flag, and then finally the `DownloadIndexFile()`. I need to see what changes
to make here!

Actually, I remember thinking about this function. So, it's a exported function,
so many are probably using this right now, to download the index file. It also
has some return values - returns the cache file for index.yaml and also any
errors. Now, if I implement downloading index.json too in this, it would be all
done silently, and I can't change the return values, as that would break the
API, and internally it's a lot of stuff, and people probably wouldn't even
know about this or want to download the index.json silently like that but still
return index.yaml cache. Wait, actually, if index.json is downloaded, only
index.json cache should come. 

There are actually multiple tests for the `DownloadIndexFile()` function. I
think I should add tests there and then come back here to this function! IF I'm
making changes to this function that is. What are the alternatives? What if I
write another function with similar functionality for index.json download? ðŸ¤”
Hmm. What are the pros and cons.

Actually, if I implement the whole feature in the `DownloadIndexFile()`
function, no one has to do anything to get all the new features - downloading
index.json if it exists. Also, even if people treat the return value, the cache
file as a yaml, it's fine, as every json is a valid yaml. But how will people
even know if the file is a index.yaml file or a index.json file? They can use
the suffix of the file name, but still. Why would people want to know if it's a
index.json or a index.yaml ? So that they can do faster parsing using a json
parser if it's a json file, same intention as ours. 

I have asked one of the maintainers for suggestions. As this is going to
decide where the tests for the download index file goes and the test for -
continue with index.yaml if index.json does not exist.

For now, I'm planning to wait a bit instead of choosing an option myself, the
cost of change seems to be a bit high, so don't wanna put too much effort by
just choosing something. I think I might choose the DownloadIndexFile()
downloading one of index.json or index.yaml

I also had some thoughts on repo update - need to see it's implementation,
but initially I had this thought about how once index.json is present, only
that must be used, but what if during add it was present, but during update
it's not. So, at any point in time, the user should not have issues because of
this behind the scenes work. I think we need to try as much as possible to
avoid any issues because of this feature and make it as smooth as possible.

Thinking of even avoiding ANY kind of errors that index.json feature has,
and resorting to index.yaml . Have to confirm with maintainers on this though.
And whatever happens, there must be exactly only one of index.json or index.yaml
in the local, not both. It can change from index.json to index.yaml or vice
versa. The only problem being - the repository server serving the index files
should actually serve both index.json and index.yaml with the same content. If
it does not, it's a problem - but yeah, we can say that it's a problem for
the repo server to solve!

Okay, so I got some suggestions from Matt Farina, one of the core maintainers! :)
Here's the slack conversation - 

https://kubernetes.slack.com/archives/C51E88VDG/p1584978300178200

I also have some general thoughts:
* Make all functions and methods unexported (small case), wherever possible. As
I'm not sure if the API should be exposed already. Maintainers can decided on
that, I'll ask though. This is because, once exposed, we cannot have breaking
changes in the API by changing the signature of functions and methods, until
we have a new major version.
* DownloadIndexFile will download index.json and save it, and save index.yaml
too, then return index.yaml file path as before. When consuming, check if json
file is present, then use it! When doing repo update, get index.json and update,
actually overwrite I think, overwrite the index.json and index.yaml too, and if
index.json is not present, then get index.yaml and overwrite index.yaml and
index.json too. Ask maintainers how that sounds. During search, install, upgrade
and other read related operations, use json index if it's present, or else use
yaml index.

So, this is what I'm going to do now - add tests for DownloadIndexFile function,
and it will have all possible scenarios - happy paths, some bad paths I guess.
Pass them and the repo add - that's just a test for the happy path at command
level I guess, and not exactly a unit test I guess ðŸ˜…

Okay, let's write the tests for DownloadIndexFile now! :D

I can see that it uses a test server, but it's not the same one that I used in
the other test. I think I'll have to change it? ðŸ¤”Gotta see how to consistently
use the other test server here too, or just add the index.json file as input
here too, so that it get's served, but again, only when a toggle is on! So that
we can do testing of different scenarios

Okay, so, the other server that I used, it was having the charts and created
the index (yaml and json) itself and served it. Here it's just the index that's
being hosted. In my case I can just tweak this local test server to serve
index.json too, based on some toggle I guess

Okay, so I added to the existing index.yaml download test for DownloadIndexFile
and added an extra test for index.json download.

I also implemented the code and passed all the tests, including the test I added
for repo add command at command level! :D

Now I want to check the code coverage and also add some more tests may be or 
modify the existing test if needed for more coverage.

The coverage actually looks good. So, I'm not going to do anything to add more
tests I guess. There are very very few error paths that aren't covered. Don't
look very important to me right now. So, gonna skip that for now! 

For repo add command level test, actually there's no way to tell if the index.yaml
file was downloaded to create the two index files or index.json downloaded.

May be I could have a toggle to disbale serving index.yaml file ? By default,
the toggle will be off, meaning index.yaml will always be served. Let's see
how to do that. This will be useful. 

Also, I need to add tests for adding repo in a go routine. I think this
shouldn't be affected by the current change I made. Let me check if it makes
sense to add this for downloading index.json

Now that I think about it, the feature I added - the code, has nothing to do
with the locking and the go routine test. So, I'm not adding extra tests! :)

I'm still adding the disable index yaml serving feature.

Oops. I started writing code WITHOUT writing tests!!!! Okay, writing tests now
ðŸ™ˆ!!

I also just noticed how I missed returning an error when enabling or disabling
JSON index ðŸ™ˆ gotta fix that too!

I added the tests for yaml index serving toggle and added code too. In fact
did some good performant code - you know, not calculating index if we aren't
going to serve index file at all based on toggle.

I passed the tests! 

I also returned error for both the json and yaml serving toggle functions.

I toggled off the index yaml in repo add test for downloading index json and it
all still worked ;) :D

Okay, I guess that's it for this test then!

Now actually I'm a bit afraid that I'm making a lot of changes and adding tests
that maintainers are going to say no to the tests. Hmm. ðŸ™ˆ

Anyways, if that's the case, I'll accordingly make changes in the tests and the
code. Next thing I gotta do is, check the repo update command!
